{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "# Getting Started\n",
    "In this post, we'll demonstrate some of the core functionality of the **SDMetrics** library by using it to evaluate a synthetic dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [],
   "source": [
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Generating Synthetic Datasets\n",
    "The **SDV** library provides tools for generating synthetic relational databases. Let's start by loading the Walmart dataset and generating a synthetic copy with 20 rows in the root table."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2020-06-25 19:46:08,024 - INFO - demo - Downloading dataset walmart from https://sdv-datasets.s3.amazonaws.com/walmart.zip\n",
      "2020-06-25 19:46:16,109 - INFO - demo - Extracting dataset into /home/xals/.virtualenvs/SDMetrics/lib/python3.6/site-packages/sdv/data\n",
      "2020-06-25 19:46:16,206 - INFO - metadata - Loading table stores\n",
      "2020-06-25 19:46:16,213 - INFO - metadata - Loading table features\n",
      "2020-06-25 19:46:16,227 - INFO - metadata - Loading table depts\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "> stores\n",
      " Store Type    Size\n",
      "     1    A  151315\n",
      "     2    A  202307\n",
      "     3    B   37392\n",
      "     4    A  205863\n",
      "     5    B   34875\n",
      "\n",
      "> features\n",
      " Store       Date  Temperature  Fuel_Price  MarkDown1  MarkDown2  MarkDown3  MarkDown4  MarkDown5         CPI  Unemployment  IsHoliday\n",
      "     1 2010-02-05        42.31       2.572        NaN        NaN        NaN        NaN        NaN  211.096358         8.106      False\n",
      "     1 2010-02-12        38.51       2.548        NaN        NaN        NaN        NaN        NaN  211.242170         8.106       True\n",
      "     1 2010-02-19        39.93       2.514        NaN        NaN        NaN        NaN        NaN  211.289143         8.106      False\n",
      "     1 2010-02-26        46.63       2.561        NaN        NaN        NaN        NaN        NaN  211.319643         8.106      False\n",
      "     1 2010-03-05        46.50       2.625        NaN        NaN        NaN        NaN        NaN  211.350143         8.106      False\n",
      "\n",
      "> depts\n",
      " Store  Dept       Date  Weekly_Sales  IsHoliday\n",
      "     1     1 2010-02-05      24924.50      False\n",
      "     1     1 2010-02-12      46039.49       True\n",
      "     1     1 2010-02-19      41595.55      False\n",
      "     1     1 2010-02-26      19403.54      False\n",
      "     1     1 2010-03-05      21827.90      False\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from sdv import load_demo\n",
    "\n",
    "metadata, real_tables = load_demo(\"walmart\", metadata=True)\n",
    "for table_name, df in real_tables.items():\n",
    "    print(\">\", table_name)\n",
    "    print(df.head().to_string(index=False))\n",
    "    print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2020-06-25 19:46:16,573 - INFO - modeler - Modeling stores\n",
      "2020-06-25 19:46:16,574 - INFO - metadata - Loading transformer CategoricalTransformer for field Type\n",
      "2020-06-25 19:46:16,574 - INFO - metadata - Loading transformer NumericalTransformer for field Size\n",
      "2020-06-25 19:46:16,583 - INFO - modeler - Modeling depts\n",
      "2020-06-25 19:46:16,584 - INFO - metadata - Loading transformer DatetimeTransformer for field Date\n",
      "2020-06-25 19:46:16,584 - INFO - metadata - Loading transformer NumericalTransformer for field Weekly_Sales\n",
      "2020-06-25 19:46:16,585 - INFO - metadata - Loading transformer NumericalTransformer for field Dept\n",
      "2020-06-25 19:46:16,585 - INFO - metadata - Loading transformer BooleanTransformer for field IsHoliday\n",
      "2020-06-25 19:46:18,065 - INFO - modeler - Modeling features\n",
      "2020-06-25 19:46:18,066 - INFO - metadata - Loading transformer DatetimeTransformer for field Date\n",
      "2020-06-25 19:46:18,066 - INFO - metadata - Loading transformer NumericalTransformer for field MarkDown1\n",
      "2020-06-25 19:46:18,067 - INFO - metadata - Loading transformer BooleanTransformer for field IsHoliday\n",
      "2020-06-25 19:46:18,067 - INFO - metadata - Loading transformer NumericalTransformer for field MarkDown4\n",
      "2020-06-25 19:46:18,068 - INFO - metadata - Loading transformer NumericalTransformer for field MarkDown3\n",
      "2020-06-25 19:46:18,069 - INFO - metadata - Loading transformer NumericalTransformer for field Fuel_Price\n",
      "2020-06-25 19:46:18,069 - INFO - metadata - Loading transformer NumericalTransformer for field Unemployment\n",
      "2020-06-25 19:46:18,071 - INFO - metadata - Loading transformer NumericalTransformer for field Temperature\n",
      "2020-06-25 19:46:18,071 - INFO - metadata - Loading transformer NumericalTransformer for field MarkDown5\n",
      "2020-06-25 19:46:18,072 - INFO - metadata - Loading transformer NumericalTransformer for field MarkDown2\n",
      "2020-06-25 19:46:18,072 - INFO - metadata - Loading transformer NumericalTransformer for field CPI\n",
      "2020-06-25 19:46:20,158 - INFO - modeler - Modeling Complete\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "> stores\n",
      "Type    Size  Store\n",
      "   B  162359      0\n",
      "   A  170980      1\n",
      "   A  121729      2\n",
      "   A  119871      3\n",
      "   B  105650      4\n",
      "\n",
      "> depts\n",
      "                         Date  Weekly_Sales  Store  Dept  IsHoliday\n",
      "2012-02-09 21:17:12.955154432  36350.852015      0   103      False\n",
      "2011-01-21 18:24:47.572623360  25216.388905      0    44      False\n",
      "2010-06-18 12:19:42.539680512 -13136.641329      0    33      False\n",
      "2012-01-24 22:12:11.601125120  18568.195813      0    66      False\n",
      "2012-07-08 02:42:07.696383488   4870.694554      0    21      False\n",
      "\n",
      "> features\n",
      "                         Date     MarkDown1  Store  IsHoliday    MarkDown4     MarkDown3  Fuel_Price  Unemployment  Temperature  MarkDown5     MarkDown2         CPI\n",
      "2012-05-18 06:23:23.519357440  13455.145775      0      False          NaN           NaN    3.331705      8.665745    38.100766        NaN           NaN  113.874949\n",
      "2014-05-12 20:57:43.380266240           NaN      0      False          NaN           NaN    3.457125      7.986831    80.337547        NaN  13352.919763   97.813549\n",
      "2011-08-31 22:09:20.301309952   9309.594749      0      False  8097.744566  14913.929190    3.790684      8.962725    36.775840        NaN   3068.128432  117.810954\n",
      "2010-10-14 15:34:59.405207296   1312.758302      0      False  6875.605041           NaN    3.908182      9.003278    17.247962  159.16623           NaN  119.884809\n",
      "2012-03-07 02:22:12.858559744           NaN      0      False   183.891473  -2399.303764    4.406721      6.441316    52.768009        NaN   3568.752822  116.397196\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from sdv import SDV\n",
    "\n",
    "sdv = SDV()\n",
    "sdv.fit(metadata, real_tables)\n",
    "\n",
    "synthetic_tables = sdv.sample_all(100)\n",
    "for table_name, df in synthetic_tables.items():\n",
    "    print(\">\", table_name)\n",
    "    print(df.head().to_string(index=False))\n",
    "    print()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Evaluation with SDMetrics\n",
    "Now that we have (1) a metadata object, (2) a set of real tables, and (3) a set of fake tables, we can pass them to **SDMetrics** for evaluation. The simplest way to get started with **SDMetrics** is to use the `evaluate` function which generates a report with the default metrics."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<sdmetrics.report.MetricsReport at 0x7fe3c4612978>"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sdmetrics import evaluate\n",
    "report = evaluate(metadata, real_tables, synthetic_tables)\n",
    "report"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "The metrics report can provide an **overall score**. This is a single scalar value which you can pass to an optimization routine (i.e. to tune some hyperparameters in your model)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-60.23613058409412\n"
     ]
    }
   ],
   "source": [
    "print(report.overall())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "Furthermore, the metrics report can also provide some key highlights. This shows the problem areas where your model performs especially poorly - for example, the below highlights suggest that our model is very bad at modeling the `MarkDownX` columns since the kstest has detected that the distributions look quite different between the real and synthetic versions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Columns</th>\n",
       "      <th>Goal</th>\n",
       "      <th>Misc. Tags</th>\n",
       "      <th>Name</th>\n",
       "      <th>Tables</th>\n",
       "      <th>Unit</th>\n",
       "      <th>Value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>column:MarkDown1</td>\n",
       "      <td>Goal.MAXIMIZE</td>\n",
       "      <td>priority:high,statistic:univariate</td>\n",
       "      <td>kstest</td>\n",
       "      <td>table:features</td>\n",
       "      <td>p-value</td>\n",
       "      <td>3.631931e-23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>column:MarkDown4</td>\n",
       "      <td>Goal.MAXIMIZE</td>\n",
       "      <td>priority:high,statistic:univariate</td>\n",
       "      <td>kstest</td>\n",
       "      <td>table:features</td>\n",
       "      <td>p-value</td>\n",
       "      <td>4.654995e-59</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>column:MarkDown3</td>\n",
       "      <td>Goal.MAXIMIZE</td>\n",
       "      <td>priority:high,statistic:univariate</td>\n",
       "      <td>kstest</td>\n",
       "      <td>table:features</td>\n",
       "      <td>p-value</td>\n",
       "      <td>1.652154e-236</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>column:Fuel_Price</td>\n",
       "      <td>Goal.MAXIMIZE</td>\n",
       "      <td>priority:high,statistic:univariate</td>\n",
       "      <td>kstest</td>\n",
       "      <td>table:features</td>\n",
       "      <td>p-value</td>\n",
       "      <td>1.103714e-77</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>column:Unemployment</td>\n",
       "      <td>Goal.MAXIMIZE</td>\n",
       "      <td>priority:high,statistic:univariate</td>\n",
       "      <td>kstest</td>\n",
       "      <td>table:features</td>\n",
       "      <td>p-value</td>\n",
       "      <td>1.536199e-47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>column:Temperature</td>\n",
       "      <td>Goal.MAXIMIZE</td>\n",
       "      <td>priority:high,statistic:univariate</td>\n",
       "      <td>kstest</td>\n",
       "      <td>table:features</td>\n",
       "      <td>p-value</td>\n",
       "      <td>1.435159e-08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>column:MarkDown5</td>\n",
       "      <td>Goal.MAXIMIZE</td>\n",
       "      <td>priority:high,statistic:univariate</td>\n",
       "      <td>kstest</td>\n",
       "      <td>table:features</td>\n",
       "      <td>p-value</td>\n",
       "      <td>1.830072e-14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>column:MarkDown2</td>\n",
       "      <td>Goal.MAXIMIZE</td>\n",
       "      <td>priority:high,statistic:univariate</td>\n",
       "      <td>kstest</td>\n",
       "      <td>table:features</td>\n",
       "      <td>p-value</td>\n",
       "      <td>2.546443e-227</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>column:CPI</td>\n",
       "      <td>Goal.MAXIMIZE</td>\n",
       "      <td>priority:high,statistic:univariate</td>\n",
       "      <td>kstest</td>\n",
       "      <td>table:features</td>\n",
       "      <td>p-value</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>column:Weekly_Sales</td>\n",
       "      <td>Goal.MAXIMIZE</td>\n",
       "      <td>priority:high,statistic:univariate</td>\n",
       "      <td>kstest</td>\n",
       "      <td>table:depts</td>\n",
       "      <td>p-value</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>column:Dept</td>\n",
       "      <td>Goal.MAXIMIZE</td>\n",
       "      <td>priority:high,statistic:univariate</td>\n",
       "      <td>kstest</td>\n",
       "      <td>table:depts</td>\n",
       "      <td>p-value</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                Columns           Goal                          Misc. Tags  \\\n",
       "0      column:MarkDown1  Goal.MAXIMIZE  priority:high,statistic:univariate   \n",
       "1      column:MarkDown4  Goal.MAXIMIZE  priority:high,statistic:univariate   \n",
       "2      column:MarkDown3  Goal.MAXIMIZE  priority:high,statistic:univariate   \n",
       "3     column:Fuel_Price  Goal.MAXIMIZE  priority:high,statistic:univariate   \n",
       "4   column:Unemployment  Goal.MAXIMIZE  priority:high,statistic:univariate   \n",
       "5    column:Temperature  Goal.MAXIMIZE  priority:high,statistic:univariate   \n",
       "6      column:MarkDown5  Goal.MAXIMIZE  priority:high,statistic:univariate   \n",
       "7      column:MarkDown2  Goal.MAXIMIZE  priority:high,statistic:univariate   \n",
       "8            column:CPI  Goal.MAXIMIZE  priority:high,statistic:univariate   \n",
       "9   column:Weekly_Sales  Goal.MAXIMIZE  priority:high,statistic:univariate   \n",
       "10          column:Dept  Goal.MAXIMIZE  priority:high,statistic:univariate   \n",
       "\n",
       "      Name          Tables     Unit          Value  \n",
       "0   kstest  table:features  p-value   3.631931e-23  \n",
       "1   kstest  table:features  p-value   4.654995e-59  \n",
       "2   kstest  table:features  p-value  1.652154e-236  \n",
       "3   kstest  table:features  p-value   1.103714e-77  \n",
       "4   kstest  table:features  p-value   1.536199e-47  \n",
       "5   kstest  table:features  p-value   1.435159e-08  \n",
       "6   kstest  table:features  p-value   1.830072e-14  \n",
       "7   kstest  table:features  p-value  2.546443e-227  \n",
       "8   kstest  table:features  p-value   0.000000e+00  \n",
       "9   kstest     table:depts  p-value   0.000000e+00  \n",
       "10  kstest     table:depts  p-value   0.000000e+00  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "report.highlights()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "In addition, you will also be able to generate a visualization of the metrics."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x864 with 4 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "report.visualize().savefig(\"../resources/visualize.png\");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "Finally, you can also print a detailed report containing all of the metrics that were computed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Columns</th>\n",
       "      <th>Goal</th>\n",
       "      <th>Misc. Tags</th>\n",
       "      <th>Name</th>\n",
       "      <th>Tables</th>\n",
       "      <th>Unit</th>\n",
       "      <th>Value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td></td>\n",
       "      <td>Goal.MAXIMIZE</td>\n",
       "      <td>child:depts</td>\n",
       "      <td>foreign-key</td>\n",
       "      <td>table:stores</td>\n",
       "      <td>binary</td>\n",
       "      <td>1.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td></td>\n",
       "      <td>Goal.MAXIMIZE</td>\n",
       "      <td>child:features</td>\n",
       "      <td>foreign-key</td>\n",
       "      <td>table:stores</td>\n",
       "      <td>binary</td>\n",
       "      <td>1.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td></td>\n",
       "      <td>Goal.MINIMIZE</td>\n",
       "      <td>detection:auroc</td>\n",
       "      <td>logistic</td>\n",
       "      <td>table:stores</td>\n",
       "      <td>auroc</td>\n",
       "      <td>7.595563e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td></td>\n",
       "      <td>Goal.MINIMIZE</td>\n",
       "      <td>detection:auroc</td>\n",
       "      <td>logistic</td>\n",
       "      <td>table:features</td>\n",
       "      <td>auroc</td>\n",
       "      <td>7.583616e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td></td>\n",
       "      <td>Goal.MINIMIZE</td>\n",
       "      <td>detection:auroc</td>\n",
       "      <td>logistic</td>\n",
       "      <td>table:depts</td>\n",
       "      <td>auroc</td>\n",
       "      <td>7.695387e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td></td>\n",
       "      <td>Goal.MINIMIZE</td>\n",
       "      <td>detection:auroc</td>\n",
       "      <td>logistic</td>\n",
       "      <td>table:stores,table:depts</td>\n",
       "      <td>auroc</td>\n",
       "      <td>7.749326e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td></td>\n",
       "      <td>Goal.MINIMIZE</td>\n",
       "      <td>detection:auroc</td>\n",
       "      <td>logistic</td>\n",
       "      <td>table:stores,table:features</td>\n",
       "      <td>auroc</td>\n",
       "      <td>7.721373e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>column:Type</td>\n",
       "      <td>Goal.MAXIMIZE</td>\n",
       "      <td>statistic:univariate</td>\n",
       "      <td>chisquare</td>\n",
       "      <td>table:stores</td>\n",
       "      <td>p-value</td>\n",
       "      <td>9.703606e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>column:IsHoliday</td>\n",
       "      <td>Goal.MAXIMIZE</td>\n",
       "      <td>statistic:univariate</td>\n",
       "      <td>chisquare</td>\n",
       "      <td>table:features</td>\n",
       "      <td>p-value</td>\n",
       "      <td>9.106489e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>column:IsHoliday</td>\n",
       "      <td>Goal.MAXIMIZE</td>\n",
       "      <td>statistic:univariate</td>\n",
       "      <td>chisquare</td>\n",
       "      <td>table:depts</td>\n",
       "      <td>p-value</td>\n",
       "      <td>9.654409e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>column:Size</td>\n",
       "      <td>Goal.MAXIMIZE</td>\n",
       "      <td>statistic:univariate</td>\n",
       "      <td>kstest</td>\n",
       "      <td>table:stores</td>\n",
       "      <td>p-value</td>\n",
       "      <td>3.656595e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>column:MarkDown1</td>\n",
       "      <td>Goal.MAXIMIZE</td>\n",
       "      <td>priority:high,statistic:univariate</td>\n",
       "      <td>kstest</td>\n",
       "      <td>table:features</td>\n",
       "      <td>p-value</td>\n",
       "      <td>3.631931e-23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>column:MarkDown4</td>\n",
       "      <td>Goal.MAXIMIZE</td>\n",
       "      <td>priority:high,statistic:univariate</td>\n",
       "      <td>kstest</td>\n",
       "      <td>table:features</td>\n",
       "      <td>p-value</td>\n",
       "      <td>4.654995e-59</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>column:MarkDown3</td>\n",
       "      <td>Goal.MAXIMIZE</td>\n",
       "      <td>priority:high,statistic:univariate</td>\n",
       "      <td>kstest</td>\n",
       "      <td>table:features</td>\n",
       "      <td>p-value</td>\n",
       "      <td>1.652154e-236</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>column:Fuel_Price</td>\n",
       "      <td>Goal.MAXIMIZE</td>\n",
       "      <td>priority:high,statistic:univariate</td>\n",
       "      <td>kstest</td>\n",
       "      <td>table:features</td>\n",
       "      <td>p-value</td>\n",
       "      <td>1.103714e-77</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>column:Unemployment</td>\n",
       "      <td>Goal.MAXIMIZE</td>\n",
       "      <td>priority:high,statistic:univariate</td>\n",
       "      <td>kstest</td>\n",
       "      <td>table:features</td>\n",
       "      <td>p-value</td>\n",
       "      <td>1.536199e-47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>column:Temperature</td>\n",
       "      <td>Goal.MAXIMIZE</td>\n",
       "      <td>priority:high,statistic:univariate</td>\n",
       "      <td>kstest</td>\n",
       "      <td>table:features</td>\n",
       "      <td>p-value</td>\n",
       "      <td>1.435159e-08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>column:MarkDown5</td>\n",
       "      <td>Goal.MAXIMIZE</td>\n",
       "      <td>priority:high,statistic:univariate</td>\n",
       "      <td>kstest</td>\n",
       "      <td>table:features</td>\n",
       "      <td>p-value</td>\n",
       "      <td>1.830072e-14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>column:MarkDown2</td>\n",
       "      <td>Goal.MAXIMIZE</td>\n",
       "      <td>priority:high,statistic:univariate</td>\n",
       "      <td>kstest</td>\n",
       "      <td>table:features</td>\n",
       "      <td>p-value</td>\n",
       "      <td>2.546443e-227</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>column:CPI</td>\n",
       "      <td>Goal.MAXIMIZE</td>\n",
       "      <td>priority:high,statistic:univariate</td>\n",
       "      <td>kstest</td>\n",
       "      <td>table:features</td>\n",
       "      <td>p-value</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>column:Weekly_Sales</td>\n",
       "      <td>Goal.MAXIMIZE</td>\n",
       "      <td>priority:high,statistic:univariate</td>\n",
       "      <td>kstest</td>\n",
       "      <td>table:depts</td>\n",
       "      <td>p-value</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>column:Dept</td>\n",
       "      <td>Goal.MAXIMIZE</td>\n",
       "      <td>priority:high,statistic:univariate</td>\n",
       "      <td>kstest</td>\n",
       "      <td>table:depts</td>\n",
       "      <td>p-value</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>column:Dept,column:Weekly_Sales</td>\n",
       "      <td>Goal.MINIMIZE</td>\n",
       "      <td>statistic:bivariate</td>\n",
       "      <td>continuous-kl</td>\n",
       "      <td>table:depts</td>\n",
       "      <td>entropy</td>\n",
       "      <td>3.452047e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>column:MarkDown4,column:MarkDown1</td>\n",
       "      <td>Goal.MINIMIZE</td>\n",
       "      <td>statistic:bivariate</td>\n",
       "      <td>continuous-kl</td>\n",
       "      <td>table:features</td>\n",
       "      <td>entropy</td>\n",
       "      <td>2.468564e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>column:MarkDown3,column:MarkDown1</td>\n",
       "      <td>Goal.MINIMIZE</td>\n",
       "      <td>statistic:bivariate</td>\n",
       "      <td>continuous-kl</td>\n",
       "      <td>table:features</td>\n",
       "      <td>entropy</td>\n",
       "      <td>2.548885e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>column:Fuel_Price,column:MarkDown1</td>\n",
       "      <td>Goal.MINIMIZE</td>\n",
       "      <td>statistic:bivariate</td>\n",
       "      <td>continuous-kl</td>\n",
       "      <td>table:features</td>\n",
       "      <td>entropy</td>\n",
       "      <td>4.966054e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>column:Unemployment,column:MarkDown1</td>\n",
       "      <td>Goal.MINIMIZE</td>\n",
       "      <td>statistic:bivariate</td>\n",
       "      <td>continuous-kl</td>\n",
       "      <td>table:features</td>\n",
       "      <td>entropy</td>\n",
       "      <td>1.832223e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>column:MarkDown1,column:Temperature</td>\n",
       "      <td>Goal.MINIMIZE</td>\n",
       "      <td>statistic:bivariate</td>\n",
       "      <td>continuous-kl</td>\n",
       "      <td>table:features</td>\n",
       "      <td>entropy</td>\n",
       "      <td>1.119519e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>column:MarkDown5,column:MarkDown1</td>\n",
       "      <td>Goal.MINIMIZE</td>\n",
       "      <td>statistic:bivariate</td>\n",
       "      <td>continuous-kl</td>\n",
       "      <td>table:features</td>\n",
       "      <td>entropy</td>\n",
       "      <td>1.637039e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>column:MarkDown2,column:MarkDown1</td>\n",
       "      <td>Goal.MINIMIZE</td>\n",
       "      <td>statistic:bivariate</td>\n",
       "      <td>continuous-kl</td>\n",
       "      <td>table:features</td>\n",
       "      <td>entropy</td>\n",
       "      <td>1.749817e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>65</th>\n",
       "      <td>column:MarkDown3,column:Temperature</td>\n",
       "      <td>Goal.MINIMIZE</td>\n",
       "      <td>statistic:bivariate</td>\n",
       "      <td>continuous-kl</td>\n",
       "      <td>table:features</td>\n",
       "      <td>entropy</td>\n",
       "      <td>3.810768e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>66</th>\n",
       "      <td>column:Fuel_Price,column:Temperature</td>\n",
       "      <td>Goal.MINIMIZE</td>\n",
       "      <td>statistic:bivariate</td>\n",
       "      <td>continuous-kl</td>\n",
       "      <td>table:features</td>\n",
       "      <td>entropy</td>\n",
       "      <td>4.188457e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67</th>\n",
       "      <td>column:Unemployment,column:Temperature</td>\n",
       "      <td>Goal.MINIMIZE</td>\n",
       "      <td>statistic:bivariate</td>\n",
       "      <td>continuous-kl</td>\n",
       "      <td>table:features</td>\n",
       "      <td>entropy</td>\n",
       "      <td>4.860888e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>68</th>\n",
       "      <td>column:MarkDown5,column:Temperature</td>\n",
       "      <td>Goal.MINIMIZE</td>\n",
       "      <td>statistic:bivariate</td>\n",
       "      <td>continuous-kl</td>\n",
       "      <td>table:features</td>\n",
       "      <td>entropy</td>\n",
       "      <td>2.618501e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>69</th>\n",
       "      <td>column:MarkDown2,column:Temperature</td>\n",
       "      <td>Goal.MINIMIZE</td>\n",
       "      <td>statistic:bivariate</td>\n",
       "      <td>continuous-kl</td>\n",
       "      <td>table:features</td>\n",
       "      <td>entropy</td>\n",
       "      <td>6.358004e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>70</th>\n",
       "      <td>column:CPI,column:Temperature</td>\n",
       "      <td>Goal.MINIMIZE</td>\n",
       "      <td>statistic:bivariate</td>\n",
       "      <td>continuous-kl</td>\n",
       "      <td>table:features</td>\n",
       "      <td>entropy</td>\n",
       "      <td>2.329406e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>71</th>\n",
       "      <td>column:MarkDown5,column:MarkDown1</td>\n",
       "      <td>Goal.MINIMIZE</td>\n",
       "      <td>statistic:bivariate</td>\n",
       "      <td>continuous-kl</td>\n",
       "      <td>table:features</td>\n",
       "      <td>entropy</td>\n",
       "      <td>1.637039e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>72</th>\n",
       "      <td>column:MarkDown4,column:MarkDown5</td>\n",
       "      <td>Goal.MINIMIZE</td>\n",
       "      <td>statistic:bivariate</td>\n",
       "      <td>continuous-kl</td>\n",
       "      <td>table:features</td>\n",
       "      <td>entropy</td>\n",
       "      <td>3.403700e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>73</th>\n",
       "      <td>column:MarkDown5,column:MarkDown3</td>\n",
       "      <td>Goal.MINIMIZE</td>\n",
       "      <td>statistic:bivariate</td>\n",
       "      <td>continuous-kl</td>\n",
       "      <td>table:features</td>\n",
       "      <td>entropy</td>\n",
       "      <td>9.972152e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>74</th>\n",
       "      <td>column:MarkDown5,column:Fuel_Price</td>\n",
       "      <td>Goal.MINIMIZE</td>\n",
       "      <td>statistic:bivariate</td>\n",
       "      <td>continuous-kl</td>\n",
       "      <td>table:features</td>\n",
       "      <td>entropy</td>\n",
       "      <td>1.111519e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75</th>\n",
       "      <td>column:Unemployment,column:MarkDown5</td>\n",
       "      <td>Goal.MINIMIZE</td>\n",
       "      <td>statistic:bivariate</td>\n",
       "      <td>continuous-kl</td>\n",
       "      <td>table:features</td>\n",
       "      <td>entropy</td>\n",
       "      <td>1.435452e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>76</th>\n",
       "      <td>column:MarkDown5,column:Temperature</td>\n",
       "      <td>Goal.MINIMIZE</td>\n",
       "      <td>statistic:bivariate</td>\n",
       "      <td>continuous-kl</td>\n",
       "      <td>table:features</td>\n",
       "      <td>entropy</td>\n",
       "      <td>2.618501e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>77</th>\n",
       "      <td>column:MarkDown5,column:MarkDown2</td>\n",
       "      <td>Goal.MINIMIZE</td>\n",
       "      <td>statistic:bivariate</td>\n",
       "      <td>continuous-kl</td>\n",
       "      <td>table:features</td>\n",
       "      <td>entropy</td>\n",
       "      <td>4.681295e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>78</th>\n",
       "      <td>column:MarkDown5,column:CPI</td>\n",
       "      <td>Goal.MINIMIZE</td>\n",
       "      <td>statistic:bivariate</td>\n",
       "      <td>continuous-kl</td>\n",
       "      <td>table:features</td>\n",
       "      <td>entropy</td>\n",
       "      <td>1.909536e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>79</th>\n",
       "      <td>column:MarkDown2,column:MarkDown1</td>\n",
       "      <td>Goal.MINIMIZE</td>\n",
       "      <td>statistic:bivariate</td>\n",
       "      <td>continuous-kl</td>\n",
       "      <td>table:features</td>\n",
       "      <td>entropy</td>\n",
       "      <td>1.749817e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80</th>\n",
       "      <td>column:MarkDown4,column:MarkDown2</td>\n",
       "      <td>Goal.MINIMIZE</td>\n",
       "      <td>statistic:bivariate</td>\n",
       "      <td>continuous-kl</td>\n",
       "      <td>table:features</td>\n",
       "      <td>entropy</td>\n",
       "      <td>1.080230e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>81</th>\n",
       "      <td>column:MarkDown2,column:MarkDown3</td>\n",
       "      <td>Goal.MINIMIZE</td>\n",
       "      <td>statistic:bivariate</td>\n",
       "      <td>continuous-kl</td>\n",
       "      <td>table:features</td>\n",
       "      <td>entropy</td>\n",
       "      <td>3.401403e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>82</th>\n",
       "      <td>column:MarkDown2,column:Fuel_Price</td>\n",
       "      <td>Goal.MINIMIZE</td>\n",
       "      <td>statistic:bivariate</td>\n",
       "      <td>continuous-kl</td>\n",
       "      <td>table:features</td>\n",
       "      <td>entropy</td>\n",
       "      <td>2.813272e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>83</th>\n",
       "      <td>column:Unemployment,column:MarkDown2</td>\n",
       "      <td>Goal.MINIMIZE</td>\n",
       "      <td>statistic:bivariate</td>\n",
       "      <td>continuous-kl</td>\n",
       "      <td>table:features</td>\n",
       "      <td>entropy</td>\n",
       "      <td>2.862722e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>84</th>\n",
       "      <td>column:MarkDown2,column:Temperature</td>\n",
       "      <td>Goal.MINIMIZE</td>\n",
       "      <td>statistic:bivariate</td>\n",
       "      <td>continuous-kl</td>\n",
       "      <td>table:features</td>\n",
       "      <td>entropy</td>\n",
       "      <td>6.358004e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>85</th>\n",
       "      <td>column:MarkDown5,column:MarkDown2</td>\n",
       "      <td>Goal.MINIMIZE</td>\n",
       "      <td>statistic:bivariate</td>\n",
       "      <td>continuous-kl</td>\n",
       "      <td>table:features</td>\n",
       "      <td>entropy</td>\n",
       "      <td>4.681295e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>86</th>\n",
       "      <td>column:CPI,column:MarkDown2</td>\n",
       "      <td>Goal.MINIMIZE</td>\n",
       "      <td>statistic:bivariate</td>\n",
       "      <td>continuous-kl</td>\n",
       "      <td>table:features</td>\n",
       "      <td>entropy</td>\n",
       "      <td>2.080662e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>87</th>\n",
       "      <td>column:CPI,column:MarkDown1</td>\n",
       "      <td>Goal.MINIMIZE</td>\n",
       "      <td>statistic:bivariate</td>\n",
       "      <td>continuous-kl</td>\n",
       "      <td>table:features</td>\n",
       "      <td>entropy</td>\n",
       "      <td>2.422266e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>88</th>\n",
       "      <td>column:MarkDown4,column:CPI</td>\n",
       "      <td>Goal.MINIMIZE</td>\n",
       "      <td>statistic:bivariate</td>\n",
       "      <td>continuous-kl</td>\n",
       "      <td>table:features</td>\n",
       "      <td>entropy</td>\n",
       "      <td>2.096885e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>89</th>\n",
       "      <td>column:CPI,column:MarkDown3</td>\n",
       "      <td>Goal.MINIMIZE</td>\n",
       "      <td>statistic:bivariate</td>\n",
       "      <td>continuous-kl</td>\n",
       "      <td>table:features</td>\n",
       "      <td>entropy</td>\n",
       "      <td>2.021915e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>90</th>\n",
       "      <td>column:CPI,column:Fuel_Price</td>\n",
       "      <td>Goal.MINIMIZE</td>\n",
       "      <td>statistic:bivariate</td>\n",
       "      <td>continuous-kl</td>\n",
       "      <td>table:features</td>\n",
       "      <td>entropy</td>\n",
       "      <td>4.870768e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>91</th>\n",
       "      <td>column:Unemployment,column:CPI</td>\n",
       "      <td>Goal.MINIMIZE</td>\n",
       "      <td>statistic:bivariate</td>\n",
       "      <td>continuous-kl</td>\n",
       "      <td>table:features</td>\n",
       "      <td>entropy</td>\n",
       "      <td>5.297344e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>92</th>\n",
       "      <td>column:CPI,column:Temperature</td>\n",
       "      <td>Goal.MINIMIZE</td>\n",
       "      <td>statistic:bivariate</td>\n",
       "      <td>continuous-kl</td>\n",
       "      <td>table:features</td>\n",
       "      <td>entropy</td>\n",
       "      <td>2.329406e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>93</th>\n",
       "      <td>column:MarkDown5,column:CPI</td>\n",
       "      <td>Goal.MINIMIZE</td>\n",
       "      <td>statistic:bivariate</td>\n",
       "      <td>continuous-kl</td>\n",
       "      <td>table:features</td>\n",
       "      <td>entropy</td>\n",
       "      <td>1.909536e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>94</th>\n",
       "      <td>column:MarkDown2,column:CPI</td>\n",
       "      <td>Goal.MINIMIZE</td>\n",
       "      <td>statistic:bivariate</td>\n",
       "      <td>continuous-kl</td>\n",
       "      <td>table:features</td>\n",
       "      <td>entropy</td>\n",
       "      <td>2.080662e+00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>95 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                   Columns           Goal  \\\n",
       "0                                           Goal.MAXIMIZE   \n",
       "1                                           Goal.MAXIMIZE   \n",
       "2                                           Goal.MINIMIZE   \n",
       "3                                           Goal.MINIMIZE   \n",
       "4                                           Goal.MINIMIZE   \n",
       "5                                           Goal.MINIMIZE   \n",
       "6                                           Goal.MINIMIZE   \n",
       "7                              column:Type  Goal.MAXIMIZE   \n",
       "8                         column:IsHoliday  Goal.MAXIMIZE   \n",
       "9                         column:IsHoliday  Goal.MAXIMIZE   \n",
       "10                             column:Size  Goal.MAXIMIZE   \n",
       "11                        column:MarkDown1  Goal.MAXIMIZE   \n",
       "12                        column:MarkDown4  Goal.MAXIMIZE   \n",
       "13                        column:MarkDown3  Goal.MAXIMIZE   \n",
       "14                       column:Fuel_Price  Goal.MAXIMIZE   \n",
       "15                     column:Unemployment  Goal.MAXIMIZE   \n",
       "16                      column:Temperature  Goal.MAXIMIZE   \n",
       "17                        column:MarkDown5  Goal.MAXIMIZE   \n",
       "18                        column:MarkDown2  Goal.MAXIMIZE   \n",
       "19                              column:CPI  Goal.MAXIMIZE   \n",
       "20                     column:Weekly_Sales  Goal.MAXIMIZE   \n",
       "21                             column:Dept  Goal.MAXIMIZE   \n",
       "22         column:Dept,column:Weekly_Sales  Goal.MINIMIZE   \n",
       "23       column:MarkDown4,column:MarkDown1  Goal.MINIMIZE   \n",
       "24       column:MarkDown3,column:MarkDown1  Goal.MINIMIZE   \n",
       "25      column:Fuel_Price,column:MarkDown1  Goal.MINIMIZE   \n",
       "26    column:Unemployment,column:MarkDown1  Goal.MINIMIZE   \n",
       "27     column:MarkDown1,column:Temperature  Goal.MINIMIZE   \n",
       "28       column:MarkDown5,column:MarkDown1  Goal.MINIMIZE   \n",
       "29       column:MarkDown2,column:MarkDown1  Goal.MINIMIZE   \n",
       "..                                     ...            ...   \n",
       "65     column:MarkDown3,column:Temperature  Goal.MINIMIZE   \n",
       "66    column:Fuel_Price,column:Temperature  Goal.MINIMIZE   \n",
       "67  column:Unemployment,column:Temperature  Goal.MINIMIZE   \n",
       "68     column:MarkDown5,column:Temperature  Goal.MINIMIZE   \n",
       "69     column:MarkDown2,column:Temperature  Goal.MINIMIZE   \n",
       "70           column:CPI,column:Temperature  Goal.MINIMIZE   \n",
       "71       column:MarkDown5,column:MarkDown1  Goal.MINIMIZE   \n",
       "72       column:MarkDown4,column:MarkDown5  Goal.MINIMIZE   \n",
       "73       column:MarkDown5,column:MarkDown3  Goal.MINIMIZE   \n",
       "74      column:MarkDown5,column:Fuel_Price  Goal.MINIMIZE   \n",
       "75    column:Unemployment,column:MarkDown5  Goal.MINIMIZE   \n",
       "76     column:MarkDown5,column:Temperature  Goal.MINIMIZE   \n",
       "77       column:MarkDown5,column:MarkDown2  Goal.MINIMIZE   \n",
       "78             column:MarkDown5,column:CPI  Goal.MINIMIZE   \n",
       "79       column:MarkDown2,column:MarkDown1  Goal.MINIMIZE   \n",
       "80       column:MarkDown4,column:MarkDown2  Goal.MINIMIZE   \n",
       "81       column:MarkDown2,column:MarkDown3  Goal.MINIMIZE   \n",
       "82      column:MarkDown2,column:Fuel_Price  Goal.MINIMIZE   \n",
       "83    column:Unemployment,column:MarkDown2  Goal.MINIMIZE   \n",
       "84     column:MarkDown2,column:Temperature  Goal.MINIMIZE   \n",
       "85       column:MarkDown5,column:MarkDown2  Goal.MINIMIZE   \n",
       "86             column:CPI,column:MarkDown2  Goal.MINIMIZE   \n",
       "87             column:CPI,column:MarkDown1  Goal.MINIMIZE   \n",
       "88             column:MarkDown4,column:CPI  Goal.MINIMIZE   \n",
       "89             column:CPI,column:MarkDown3  Goal.MINIMIZE   \n",
       "90            column:CPI,column:Fuel_Price  Goal.MINIMIZE   \n",
       "91          column:Unemployment,column:CPI  Goal.MINIMIZE   \n",
       "92           column:CPI,column:Temperature  Goal.MINIMIZE   \n",
       "93             column:MarkDown5,column:CPI  Goal.MINIMIZE   \n",
       "94             column:MarkDown2,column:CPI  Goal.MINIMIZE   \n",
       "\n",
       "                            Misc. Tags           Name  \\\n",
       "0                          child:depts    foreign-key   \n",
       "1                       child:features    foreign-key   \n",
       "2                      detection:auroc       logistic   \n",
       "3                      detection:auroc       logistic   \n",
       "4                      detection:auroc       logistic   \n",
       "5                      detection:auroc       logistic   \n",
       "6                      detection:auroc       logistic   \n",
       "7                 statistic:univariate      chisquare   \n",
       "8                 statistic:univariate      chisquare   \n",
       "9                 statistic:univariate      chisquare   \n",
       "10                statistic:univariate         kstest   \n",
       "11  priority:high,statistic:univariate         kstest   \n",
       "12  priority:high,statistic:univariate         kstest   \n",
       "13  priority:high,statistic:univariate         kstest   \n",
       "14  priority:high,statistic:univariate         kstest   \n",
       "15  priority:high,statistic:univariate         kstest   \n",
       "16  priority:high,statistic:univariate         kstest   \n",
       "17  priority:high,statistic:univariate         kstest   \n",
       "18  priority:high,statistic:univariate         kstest   \n",
       "19  priority:high,statistic:univariate         kstest   \n",
       "20  priority:high,statistic:univariate         kstest   \n",
       "21  priority:high,statistic:univariate         kstest   \n",
       "22                 statistic:bivariate  continuous-kl   \n",
       "23                 statistic:bivariate  continuous-kl   \n",
       "24                 statistic:bivariate  continuous-kl   \n",
       "25                 statistic:bivariate  continuous-kl   \n",
       "26                 statistic:bivariate  continuous-kl   \n",
       "27                 statistic:bivariate  continuous-kl   \n",
       "28                 statistic:bivariate  continuous-kl   \n",
       "29                 statistic:bivariate  continuous-kl   \n",
       "..                                 ...            ...   \n",
       "65                 statistic:bivariate  continuous-kl   \n",
       "66                 statistic:bivariate  continuous-kl   \n",
       "67                 statistic:bivariate  continuous-kl   \n",
       "68                 statistic:bivariate  continuous-kl   \n",
       "69                 statistic:bivariate  continuous-kl   \n",
       "70                 statistic:bivariate  continuous-kl   \n",
       "71                 statistic:bivariate  continuous-kl   \n",
       "72                 statistic:bivariate  continuous-kl   \n",
       "73                 statistic:bivariate  continuous-kl   \n",
       "74                 statistic:bivariate  continuous-kl   \n",
       "75                 statistic:bivariate  continuous-kl   \n",
       "76                 statistic:bivariate  continuous-kl   \n",
       "77                 statistic:bivariate  continuous-kl   \n",
       "78                 statistic:bivariate  continuous-kl   \n",
       "79                 statistic:bivariate  continuous-kl   \n",
       "80                 statistic:bivariate  continuous-kl   \n",
       "81                 statistic:bivariate  continuous-kl   \n",
       "82                 statistic:bivariate  continuous-kl   \n",
       "83                 statistic:bivariate  continuous-kl   \n",
       "84                 statistic:bivariate  continuous-kl   \n",
       "85                 statistic:bivariate  continuous-kl   \n",
       "86                 statistic:bivariate  continuous-kl   \n",
       "87                 statistic:bivariate  continuous-kl   \n",
       "88                 statistic:bivariate  continuous-kl   \n",
       "89                 statistic:bivariate  continuous-kl   \n",
       "90                 statistic:bivariate  continuous-kl   \n",
       "91                 statistic:bivariate  continuous-kl   \n",
       "92                 statistic:bivariate  continuous-kl   \n",
       "93                 statistic:bivariate  continuous-kl   \n",
       "94                 statistic:bivariate  continuous-kl   \n",
       "\n",
       "                         Tables     Unit          Value  \n",
       "0                  table:stores   binary   1.000000e+00  \n",
       "1                  table:stores   binary   1.000000e+00  \n",
       "2                  table:stores    auroc   7.595563e-01  \n",
       "3                table:features    auroc   7.583616e-01  \n",
       "4                   table:depts    auroc   7.695387e-01  \n",
       "5      table:stores,table:depts    auroc   7.749326e-01  \n",
       "6   table:stores,table:features    auroc   7.721373e-01  \n",
       "7                  table:stores  p-value   9.703606e-01  \n",
       "8                table:features  p-value   9.106489e-01  \n",
       "9                   table:depts  p-value   9.654409e-01  \n",
       "10                 table:stores  p-value   3.656595e-01  \n",
       "11               table:features  p-value   3.631931e-23  \n",
       "12               table:features  p-value   4.654995e-59  \n",
       "13               table:features  p-value  1.652154e-236  \n",
       "14               table:features  p-value   1.103714e-77  \n",
       "15               table:features  p-value   1.536199e-47  \n",
       "16               table:features  p-value   1.435159e-08  \n",
       "17               table:features  p-value   1.830072e-14  \n",
       "18               table:features  p-value  2.546443e-227  \n",
       "19               table:features  p-value   0.000000e+00  \n",
       "20                  table:depts  p-value   0.000000e+00  \n",
       "21                  table:depts  p-value   0.000000e+00  \n",
       "22                  table:depts  entropy   3.452047e-01  \n",
       "23               table:features  entropy   2.468564e-01  \n",
       "24               table:features  entropy   2.548885e-01  \n",
       "25               table:features  entropy   4.966054e-01  \n",
       "26               table:features  entropy   1.832223e-01  \n",
       "27               table:features  entropy   1.119519e-01  \n",
       "28               table:features  entropy   1.637039e-02  \n",
       "29               table:features  entropy   1.749817e-01  \n",
       "..                          ...      ...            ...  \n",
       "65               table:features  entropy   3.810768e-01  \n",
       "66               table:features  entropy   4.188457e-01  \n",
       "67               table:features  entropy   4.860888e-01  \n",
       "68               table:features  entropy   2.618501e-02  \n",
       "69               table:features  entropy   6.358004e-01  \n",
       "70               table:features  entropy   2.329406e+00  \n",
       "71               table:features  entropy   1.637039e-02  \n",
       "72               table:features  entropy   3.403700e-02  \n",
       "73               table:features  entropy   9.972152e-02  \n",
       "74               table:features  entropy   1.111519e-01  \n",
       "75               table:features  entropy   1.435452e-01  \n",
       "76               table:features  entropy   2.618501e-02  \n",
       "77               table:features  entropy   4.681295e-02  \n",
       "78               table:features  entropy   1.909536e+00  \n",
       "79               table:features  entropy   1.749817e-01  \n",
       "80               table:features  entropy   1.080230e-01  \n",
       "81               table:features  entropy   3.401403e-01  \n",
       "82               table:features  entropy   2.813272e-01  \n",
       "83               table:features  entropy   2.862722e-01  \n",
       "84               table:features  entropy   6.358004e-01  \n",
       "85               table:features  entropy   4.681295e-02  \n",
       "86               table:features  entropy   2.080662e+00  \n",
       "87               table:features  entropy   2.422266e+00  \n",
       "88               table:features  entropy   2.096885e+00  \n",
       "89               table:features  entropy   2.021915e+00  \n",
       "90               table:features  entropy   4.870768e+00  \n",
       "91               table:features  entropy   5.297344e+00  \n",
       "92               table:features  entropy   2.329406e+00  \n",
       "93               table:features  entropy   1.909536e+00  \n",
       "94               table:features  entropy   2.080662e+00  \n",
       "\n",
       "[95 rows x 7 columns]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "report.details()"
   ]
  }
 ],
 "metadata": {
  "file_extension": ".py",
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.9"
  },
  "mimetype": "text/x-python",
  "name": "python",
  "npconvert_exporter": "python",
  "pygments_lexer": "ipython3",
  "version": 3
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
